https://docplayer.pl/60121237-1-utworz-blok-pamieci-wspoldzielonej-korzystajac-z-ponizszego-kodu.html
https://students.mimuw.edu.pl/SO/Linux/Temat03/pamiec.html
https://docs.docker.com/compose/gettingstarted/
https://docs.docker.com/get-started/02_our_app/
http://www.vishalchovatiya.com/semaphore-between-processes-example-in-c/
https://eric-lo.gitbook.io/synchronization/semaphore-in-c
https://riptutorial.com/c/example/31715/semaphores 
https://www.geeksforgeeks.org/ipc-using-message-queues/

Ustawianie statycznego ip docker compose:
services:
 web:
 
 networks:
 mynetwork:
 ipv4_address: 192.168.55.10
 build: .
 ports:
 - "8000:5000"
 volumes:
 - .:/code
 environment:
 FLASK_DEBUG: "true"
 
 depends_on:
 - redis
 
 redis:
 image: "redis:alpine"
 
 networks:
 mynetwork:
 ipv4_address: 192.168.55.11
 
networks:
 mynetwork:
 ipam:
 driver: default
 config:
 - subnet: 192.168.55.0/24
 
 
 Getter zimno ciepło pamięć współdzielona:
 #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/shm.h>

#define SHM_KEY 1234  // Id pamieci
#define SHM_SIZE 1024  // Rozmiar pamięci

int main() {
    int shm_id = shmget(SHM_KEY, SHM_SIZE, 0666);
    char *shm_ptr = shmat(shm_id, NULL, 0);

    while (1) {
        char message[SHM_SIZE];
        strcpy(message, shm_ptr);
        //printf(message);
        //printf("\n");
        if (strcmp(message, "CIEPLO") == 0) {
            printf(message);
            printf("\n");
        } else if (strcmp(message, "ZIMNO") == 0) {
            printf(message);
            printf("\n");
        } else {
            printf("Error zly zapis do pamieci %s\n", message);
        }

        sleep(1);
    }
    return 0;
}

Setter zimno ciepło pamięć współdzielona:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/shm.h>

#define SHM_KEY 1234  // id pamięci
#define SHM_SIZE 1024  // Rozmiar pamięci

int main() {
    int shm_id = shmget(SHM_KEY, SHM_SIZE, 0666);
    char *shm_ptr = shmat(shm_id, 0, 0);

    while (1) {
        strcpy(shm_ptr, "CIEPLO");
        //printf("sender: CIEPLO\n");
        sleep(1);

        strcpy(shm_ptr, "ZIMNO");
        sleep(1);
    }


    return 0;
}

Kolejka komunikatów:
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>
 
struct mesg_buffer {
 long mesg_type;
 char mesg_text[100];
} message;
 
int main(){
 key_t key;
 int msgid;
 key = ftok("hello",65);
 msgid = msgget(key,0666|IPC_CREAT);
 message.mesg_type=1;
 
 printf("Write Data : ");
 fgets(message.mesg_text,100,stdin);
 printf("\n");
 pid_t pid = fork();
 if (pid < 0) {
 fprintf(stderr, "Błąd podczas wywołania fork().\n");
 return 1;
 } else if(pid>0){
 printf("Jestem 1 procesem\n");
 msgsnd(msgid, &message, sizeof(message), 0);
 printf("Data send is : %s \n", message.mesg_text);
 }
 else{
 printf("Jestem 2 procesem\n");
 msgrcv(msgid,&message,sizeof(message),1,0);
 printf("Data Received is : %s \n", message.mesg_text);
 
 }
 msgctl(msgid, IPC_RMID, NULL);
 return 0;
 
}

Wątki:
#include <pthread.h>
#include <stdio.h>
 
void *thread_function() 
{
 for (int z = 0; z < 10; z++)
 {
 printf("%d ",z);
 }
 printf("\n");
 pthread_exit(NULL);
}
 int main()
 {
 pthread_t thread_id;
 pthread_create(&thread_id, NULL, thread_function, NULL);
 void* result;
 pthread_join(thread_id,NULL);
 
 }
 


 
 
